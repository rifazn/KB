= 1.1 Getting Started =

== Local Version Control Systems ==

RCS:
	works by keeping patch sets in a special format on disk; it can then recreate what any file looked like at any opint in time by adding up the patches.

	Is under the GNU project (probly).

== Centralized Version Control Systems (CVCSs) ==

Examples: CVS, Subversion, Perforce

Has a single server that contains all the versioned files. Much easier for adminitrators to manage clients than controlling local databases on every client (as is in case of RCS).

== Distributed Version Control Systems (DVCSs) ==

Examples: Git, Mercurial, Bazaar, Darcs)

Clients fully mirror the repository including the full history, instead of having the latest snapshot of the files.

Every clone is a full backup of the data.

Easily workable with multiple remote repositories. Easier to collaborate with different groups of people. Several type of workflow are possible (that are not possible in centralized systems) sych as hierarchical models (don't know what whis is).


= 1.2 A Short History of Git =

_(Copied Verbatim from https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git)_

A Short History of Git

As with many great things in life, Git began with a bit of creative destruction and fiery controversy.

The Linux kernel is an open source software project of fairly large scope. During the early years of the Linux kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files. In 2002, the Linux kernel project began using a proprietary DVCS called BitKeeper.

In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool’s free-of-charge status was revoked. This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper. Some of the goals of the new system were as follows:

    Speed

    Simple design

    Strong support for non-linear development (thousands of parallel branches)

    Fully distributed

    Able to handle large projects like the Linux kernel efficiently (speed and data size)

Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. It’s amazingly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development (See [Git Branching](https://git-scm.com/book/en/v2/ch00/ch03-git-branching)).





= 1.3 What is Git ? =

Git stores and thinks about information in a different way than most other VCS programs.


Other VCSs use the 'delta-based' version control. That is, they store information as a set of files and just the changes to each file made over time.

![Storing data as changes to a base version of each file](images/other-vcs-delta.png)

With Git, every time you commit, or save the state of your project, Git stores a reference to the exact snapshot of the file.

![Storing data as snapshots of the project over time](images/git-vcs-snapshot.png)

Nearly every operation in Git is local.

Git has integrity:

Everything in Git is checksummed. The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters.

When you commit changes to the Git database, it's not easy to lose that data. Git also, allows you to undo changes so using Git is a joy.

The Three States

1. Modified:
	File changed but not commited to database yet.
2. Staged:
	Marked a modified file in its current version to go into your next commit snapshot.
3. Commited:
	Data is safely stored in your local database.

This leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.

![Working tree, staging area, and Git directory](images/git-three-states.png)



The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase “staging area” works just as well.

The Git directory is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you clone a repository from another computer.

The basic Git workflow goes something like this:

    1. You modify files in your working tree.
    2. You selectively stage just those changes you want to be part of your next commit, which adds only those changes to the staging area.
    3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it’s considered committed. If it has been modified and was added to the staging area, it is staged. And if it was changed since it was checked out but has not been staged, it is modified. In Git Basics, you’ll learn more about these states and how you can either take advantage of them or skip the staged part entirely.



= 1.6 First-Time Git Setup =

_Only quick short notes from this point on_

The `git config` tool lets you set configuration variables that control all aspects of Git.

Passing the `--system` option will modify the config file at `/etc/gitconfig`.

Passing the `--global` option will modify the config file at `~/.gitcong` or `~/.config/git/config`.

Passing the `--local` option will modify the config file at the local repository; that is, `.git/config`. A git repo needs to exist of course.


Each level overrides values in the previous level.

View all of the settings and where they are coming from: `git config --list --show-origin`

Set-up at least the user name and email

```
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
```

Additionally, set the editor. Linux users also just have the `EDITOR` env variable set.

```
git config --global core.editor vim
```

The default branch name is 'master'. I like it this way. But to change it:

```
git config --global init.defaultBranch main
```

`git config --list` lists all the config variables. Or, just check one key: `git config user.name`.


= 1.7 Getting Help =

`git help <verb>` or `man git-<verb>`, or `git <verb> --help` are equivalent. All open the man page for that Git tool.

Shorter help with `git <verb> -h`.

For online help, use the irc channels `#git`, `#github`, or `#gitlab` on https://libera.chat/


= Chapter 2 - Only Quick Short Notes from this point on =

Tracked files:
    Files that Git knows about. Such as files were in the last snapshot (commit), newly staged files. They can be unmodified, modified, or staged.

Untracked:
    Literally everything else. (Adding a new file to the working tree)

Working tree:
    Is probably the directory, and its files and sub-directories, of the current Git repository.

git add:
    Think more like, "add precisely this content to the next commit", instead of "add this file to the project." Adds those files to the staging area. These files are now being 'tracked'.

As you edit files, Git sees them as modified, because you’ve changed them since your last commit. As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.

![The lifecycle of the status of your files](images/git-files-lifecycle.png)


`git status` to check the status of the current working tree.

The same file may show under 'Changes to be commited' and also 'Changes not staged for commit'. This file is both `staged` and `unstaged`. This happens when you have made changes to the file, _after_ already staging it (git add-ing) it.

Short Status

`git status -s`

```
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
```

New files that aren’t tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on. There are two columns to the output — the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree. So for example in that output, the README file is modified in the working directory but not yet staged, while the lib/simplegit.rb file is modified and staged. The Rakefile was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.


A git ignore example

```
# ignore all .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in any directory named build
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf
```

Diffing

To see what you've changed but not yet staged:

`git diff`

To see what's staged (that will go in the next commit):

`git diff --staged|--cached`


Commiting:

Besides usual commiting, you can also store the `git status` output in a commit message by just doing `git commit` and keeping all the lines that are commented out.

`git commit -a` will skip the staging area. This automatically stages all the files that are being tracked.


Removing files:

`git rm` removes the file from the staging area (tracked files) and also removes it from the working directory.

If you only remove it from the working directory using `rm`, it shows up in the `unstaged` area of `git status` output (under 'Changes not staged for commit: deleted <file>'). Then `git rm` stages the file's removal.

`git rm log/*.log` to unstage and `rm` from working directory according to a glob pattern.

To keep the file in the working directory, but only remove it from the staging, `git rm --cached <file>`.


Renaming files:

`git mv file_from file_to`.

This is the same as doing:

`mv <src> <dest>`
`git rm <src>`
`git add <dest>`



= 2.3 Git Basics - Viewing the Commit History =

By default, `git log` shows the commit history below the branch that is checked out.

`checkout` moves the HEAD to the commit number that was passed to it. ALSO, it makes the working tree, AND the index as it was in that commit. The branch pointer stays the same.

`git log -p -2` to show the last two commits along with the diff in that commit.

Also add `--stat` to show how many lines in each file was changed.

Try `--pretty` with values `oneline`, `short`, `full`, `fuller`.

`--pretty=oneline` shows every commit on one line but shows the full commit hash unlike like `--oneline` which trims the commit hashes too.

Manually formatting log output: `git log --pretty=format:"%h - %an, %ar : %s"` prints abbreviated hash, author's name, authored date (relative), commit message.


Add an ascii graph to the log that shows the merge history in a graphical way:

`git log --pretty=format:"%h %s" --graph`


Limiting log output

Pass `--since=2.weeks` to only show logs from 2 weeks ago. Specific date like "2008-01-15", or a relative date such as "2 years 1 day 3 minutes ago" is also possible.


Filtering log output

`--author` option takes arguments to show commits made by a specific author. `--grep` search for any pattern in the logs.

The `-S` option (colloquially known as Git's "pickaxe" option) is used to show only those commits where the search term has changed in the number of its occurrences. Example: `git log -S <function_name>`

Show only those commits that changed a certain, or a set of, files: `git log -- path/to/file`

For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano in the month of October 2008 and are not merge commits, you can run something like this:

```
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
```

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.



= 2.4 Git Basics - Undoing Things =

Amending the previous commit

Just `git commit --amend`. This will replace the previous commit with the commit you make now.

You can stage any new file, modify a staged file and stage it again, unstage a file, and just use `--amend`; then provide a commit message in your editor. If no files were changed, `--amend` will just _amend_ the commit message.

An example:

```
git commit -m 'init'
# Oops, forgot something
git add forgotten_file
git commit --amend
```

You end up with a single commit -- the second one replaces the first.

A big Gotcha: Only do this to local history. DO NOT amend things once they pushed to a remote.


Unstaging a staged file

`git reset HEAD <file>`

`git restore` was added in Git version 2.23 onwards. So same effect:

`git restore --staged <file>`

Also, remove the file from staging has the same effect:

`git rm --cached <file>`


Unmodifying a modified file

Revert a file back to how it was on previous commit even if it was staged (discards changes in working directory, duh):

`git checkout -- <file>`

discard changes to a file in working directory with:

`git restore <file>`

With `reset`:

    git reset --hard -- <file> # equivalently: git reset --hard HEAD <file>

Think soo.... Finish reading the reset part

= 2.5 Git Basics - Working with Remotes =

`git remote` to list all remotes.

`git remote -v` to also show the URLs associated for reading and writing with that remote.


Add a new remote repository

`git remote add <shortname> <url>`

Suppose you add a new remote that has changes from a particular user:

`git remote add user1 url`.

To download all changes from user1's: `git fetch user1`

Now you will get a new branch: `user1/master`. You can now merge it into one of your branches, or check out a local branch at that point.

(Git fetch downloads the data into the local repository -- it does not merge it with any of the local work. You have to merge it manually when you're ready)


Pushing to Remotes:

`git push <remote> <branch>` -- I guess this is equivalent to `git push <remote> <local_branch>:<remote_branch>` where branch name is same on both local and remote.


Inspect a Remote:

`git remote show <remote>`


= 2.6 Git Basics - Tagging =

Listing all tags:

`git tags`

List tags matching a pattern:

`git tag -l "v1.8.5*"`


Create annotated tags:

Annotated tags have a schecksum, contain the tagges name, email and date; along with a tagging message. They can be signed and verified with GNU Privacy Guiard (GPG).

`git tag -a <tag_name> -m "a message"`

Ex: `git tag -a v1.4 -m "my version 1.4"`


Lightweight tags:

This is basically the commit checksum stored in a file -- no other information is kept:

Create thus: `git tab v1.4-lw`


Show a tag:

`git show v1.4`


Tagging Later:

Show the log:

`git log --pretty=oneline`

Suppose you forgot to tag the project at, v1.2, for example, which was on a certain commit. This is how you tag that commit:

`git tag -a v1.2 9fceb02`

Done!


Sharing Tags

By default, `git push` does not transfer tags to the remote servers. You can push them this way:

`git push <remote> <tagname>`

To push a lot of tags at once,

   `git push <remote> --tags`

When someone pulls or clones the repo, they will get all the tags as well.


Deleting Tags

Delete a tag in the local repo:
    
    git tad -d v1.something

Delete on remote server:

    git push <remote> --delete <tagname>


Checking out Tags

You can checkout a tag, the usual way you checkout to a commit.

    git checkout <tagname>

This puts you in "detached HEAD" state. Any commits made on this state will not be reachable apart from the exact commit hash. Thus, if a change needs to be made here -- to fix a bug on an older version perhaps -- a new branch will need to be created:

    git checkout -b v2-fix v2.0.0





= 2.7 Git Basics - Git Aliases =

Some common aliases you can add:

    git config --global alias.co checkout
    git config --global alias.br branch
    git config --global alias.ci commit
    git config --global alias.st status 
    git config --global alias.last 'log -1 HEAD'

Unstage a file

    git config --global alias.unstage 'reset HEAD --'





= 3.1 Git Branching - Branches in a Nutshell =








= 3.6 Git Rebasing =

Instead of _merging_ back to the base branch from a topic branch that diverged from the main commit path, they changes in the topic branch can be "rebased" (alsa called "replayed") on to the base branch.

The resulting source content is the same in both `merge` and `rebase`.

Why `rebase` instead of `merge`?

1. `rebase` shows the commit log as if all code done on a divergent branch had happened in the `main` branch. After merging two branches, `git log --graph` will still show that some divergent commits had rejoined with the base branch's commits. But rebasing will not.
2. When merge conflicts happen, an additional commit is created that show that two branches have been merged. But in case of `rebase` no additional commit is displayed in the history.
3. Also, `git author-log`.


How to `rebase`

1. Checkout the topic branch.
2. `git rebase <targetbranch>`. <targetbranch> is the branch where the code in the divergent branch (also the current branch in this case) will be rebased on to.
3. Checkout to the base branch.
4. git merge topic branch.



A more interesting and deeper rebase

Suppose, you have a more interesting scenario where you have a `sever` branch that deviates from the `master` branch, and then a `client` branch which diverges off from `server`. Like below:

![Server branching off from master, client branching off from server](images/git-interesting-rebase-1.png)

Now, you want to rebase your `client` side changes onto the `master` branch. How do you do it? Do you just `git rebase master`? No... For reasons unknown (I'll have to test it manually). What you do is `git rebase --onto master server client`, maybe because you also want the code snapshot in `server` branch that `client` branched off from. To get:

![Client side code rebased onto master](images/git-interesting-rebase-2.png)

After running the rebase above, you just checkout to `master` and perform a `merge` that simply, and beautifully, fast-forwards the `master` branch. Like so:

![Master branch now has client branch's code](images/git-interesting-rebase-3.png)


Now suppose you want to incorporate the changes of `server` branch to the `master` branch. You can do that without having to checkout any branch by: `git rebase <to_branch> <from_branch>`. Then simple checkout to `master` and merge `server`.

After running `git rebase master server`:

![Server rebased onto master](images/git-interesting-rebase-4.png)

After `git checkout master` and `git merge server`, and deleting the `client` and `server` branches:

![Server rebased onto master](images/git-interesting-rebase-5.png)


The Perils of Rebasing

Can be summed up in a single line:

**Do not rebase commits that exist outside your repository and that people may have based work on.**


More rebasing examples like, editing commits, squashing, reordering, deleting can be found on chapter 7 below.


= 7.6 Git Tools - Rewriting History =

Really excellent, short, succinct read about:

  - Changing multiple commit messages
  - Reordering commits
  - Squashing commits
  - Splitting a commit
  - Deleting a commit

Can be found here: https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History (05-02-2022)

Next up, resetting -- a deep dive.


= 7.7 Git Tools - Reset Demystified =

Reset moves what commit the HEAD points to. This isn't the same as `checkout` which moves the branch pointer to the passed commit as well.

Note that: the branch pointer always points to the latest commit of that branch.

There are three types of reset that you can do: `--soft|mixed|hard`

`--soft`:

    Only moves the branch pointer to the specified commit. The Index and the working tree are unchanged.

    If you `git reset --soft HEAD~`, then make and _stage_ the changes (or not), then commit, it is essentially the same as amending a commit.

`--mixed`:

    Perform `--soft` AND update the index as it was when that commit was made. So, this modifies the snapshot of the commit AND changes the index.

    In other words, `git reset --mixed HEAD~` undoes the last commit and also _unstages_ everything. You are rolled back to before you ran your `git add` and `git commit` commands.

`--hard`:

    This makes the working directory look like the index.

    On top of what `--mixed` does, it also undoes all the work you did in your working tree.


Recap from the book:

The reset command overwrites these three trees in a specific order, stopping when you tell it to:

    Move the branch HEAD points to (stop here if --soft).

    Make the index look like HEAD (stop here unless --hard).

    Make the working directory look like the index.

Unstage a file with reset:

    git reset <file>

Reset can also unstage a file on a hunk-by-hunk, part-by-part, basis as it supports the `--patch` option too.


Squash commits with reset:

To squash a few commits, you want your working directory and the staged files (aka the index) to stay the same. So to squash, choose the commit you would like squashed upto. And just do:

    git reset --soft <commit>

or, to squash two commits (including the latest one, one that branch is pointing to):

    git reset --soft HEAD~2

And then just commit!


And again, the difference of `reset` with `checkout`?

`checkout` detaches the HEAD, man. Well... unless you are pointing to another branch that is.

Git reset vs. checkout on a branch:

`git checkout <branch>` and `git reset --hard <branch>` are _~quite_ the same. Both of these will update the three trees (HEAD, index, working) but there are still differences.

First, unlike `reset --hard`, `checkout` is working-directory safe; it will check to make sure it’s not blowing away files that have changes to them. Actually, it’s a bit smarter than that — it tries to do a trivial merge in the working directory, so all of the files you haven’t changed will be updated. reset --hard, on the other hand, will simply replace everything across the board without checking.

The second important difference is how `checkout` updates `HEAD`. Whereas `reset` will move the branch that `HEAD` points to, `checkout` will move `HEAD` itself to point to another branch.

For instance, say we have master and develop branches which point at different commits, and we’re currently on develop (so HEAD points to it). If we run git reset master, develop itself will now point to the same commit that master does. If we instead run git checkout master, develop does not move, HEAD itself does. HEAD will now point to master.

So, in both cases we’re moving HEAD to point to commit A, but how we do so is very different. reset will move the branch HEAD points to, checkout moves HEAD itself.

![Git reset vs. checkout on a branch](images/git-reset-vs-checkout-branch.png)

Git reset vs checkout on a file

Makes the index to look like file. Oooooh, it practically unstages the file. Here is a nice diagram:

![Git reset on a file](images/git-reset-path-1.png)



With Paths

The other way to run checkout is with a file path, which, like reset, does not move HEAD. It is just like git reset [branch] file in that it updates the index with that file at that commit, but it also overwrites the file in the working directory. It would be exactly like git reset --hard [branch] file (if reset would let you run that) — it’s not working-directory safe, and it does not move HEAD.

Also, like git reset and git add, checkout will accept a --patch option to allow you to selectively revert file contents on a hunk-by-hunk basis.




Here’s a cheat-sheet for which commands affect which trees. The “HEAD” column reads “REF” if that command moves the reference (branch) that HEAD points to, and “HEAD” if it moves HEAD itself. Pay especial attention to the 'WD Safe?' column — if it says NO, take a second to think before running that command.

                            | HEAD | Index | Workdir | WD Safe?
*Commit Level*              |      |       |         | 
`reset --soft [commit]`     | REF  | NO    | NO      | YES
`reset [commit]`            | REF  | YES   | NO      | YES
`reset --hard [commit]`     | REF  | YES   | YES     | NO
`checkout <commit>`         | HEAD | YES   | YES     | YES
*File Level*                |      |       |         | 
`reset [commit] <paths>`    | NO   | YES   | NO      | YES
`checkout [commit] <paths>` | NO   | YES   | YES     | NO



**This concludes my Git study for the time being. After getting back from my interview, I must finish reading Chapter 5 - Distributed Git.

Ways to restore??

+ `git restore --staged <file>`
+ `git reset HEAD <file>`
